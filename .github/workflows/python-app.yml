# Python应用程序工作流
# 适用于Cursor Tool Free桌面应用

name: Python Application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install -r requirements.txt
        # 安装浏览器依赖（可选，可能在某些环境失败）
        pip install -r requirements_browser.txt || echo "浏览器依赖安装失败，跳过"
    
    - name: Lint with flake8
      run: |
        # 停止构建如果有Python语法错误或未定义名称
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # 将其他问题作为警告（可选）
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test imports
      run: |
        # 测试主要模块是否可以正常导入
        python -c "import sys; sys.path.insert(0, 'src'); from config import Config; print('✅ Config模块导入成功')"
        python -c "import sys; sys.path.insert(0, 'src'); from utils.cursor_manager import CursorManager; print('✅ CursorManager模块导入成功')"
        python -c "import sys; sys.path.insert(0, 'src'); from utils.browser_manager import BrowserManager; print('✅ BrowserManager模块导入成功')"
    
    - name: Test application startup (headless)
      if: runner.os != 'Linux'  # 在Linux上跳过GUI测试
      run: |
        # 测试应用程序是否可以启动（无GUI模式）
        python -c "
        import sys, os
        sys.path.insert(0, 'src')
        from config import Config
        config = Config.get_instance()
        print('✅ 应用程序配置初始化成功')
        "

  build:
    needs: test
    runs-on: windows-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build executable
      run: |
        # 创建单文件可执行程序
        pyinstaller --onefile --windowed --name "CursorToolFree" main.py --add-data "src;src"
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: CursorToolFree-Windows
        path: dist/CursorToolFree.exe
