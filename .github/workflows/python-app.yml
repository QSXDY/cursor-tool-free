# Cursor Tool Free - CI/CD工作流
# 专为桌面应用优化的工作流

name: CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # 允许部分平台失败
      matrix:
        os: [windows-latest, ubuntu-latest]  # 移除macOS减少复杂性
        python-version: ["3.10", "3.11"]      # 减少Python版本，专注主流版本

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        pip install -r requirements.txt
    
    - name: Install browser dependencies (optional)
      continue-on-error: true  # 允许失败
      run: |
        pip install -r requirements_browser.txt
    
    - name: Setup headless display (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
    
    - name: Lint with flake8 (warnings only)
      continue-on-error: true
      run: |
        # 只检查严重错误，忽略全局变量警告
        flake8 . --count --select=E9,F63,F7 --show-source --statistics || true
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test imports
      run: |
        # 测试主要模块导入
        python -c "import sys; sys.path.insert(0, 'src'); from config import Config; print('✅ Config模块导入成功')"
        python -c "import sys; sys.path.insert(0, 'src'); from utils.cursor_manager import CursorManager; print('✅ CursorManager模块导入成功')"
    
    - name: Test browser manager (optional)
      continue-on-error: true
      run: |
        python -c "import sys; sys.path.insert(0, 'src'); from utils.browser_manager import BrowserManager; print('✅ BrowserManager模块导入成功')"
    
    - name: Test configuration
      env:
        QT_QPA_PLATFORM: offscreen  # headless模式
      run: |
        python -c "
        import sys, os
        sys.path.insert(0, 'src')
        from config import Config
        config = Config.get_instance()
        print('✅ 配置系统初始化成功')
        print(f'配置目录: {config.config_dir}')
        "

  build:
    needs: test
    runs-on: windows-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements_browser.txt
        pip install pyinstaller
    
    - name: Build executable
      continue-on-error: true
      run: |
        # 创建单文件可执行程序（跳过控制台）
        pyinstaller --onefile --windowed --name "CursorToolFree" main.py --add-data "src;src" --hidden-import PyQt6
    
    - name: Upload artifacts
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: CursorToolFree-Windows-v1.0.0
        path: dist/CursorToolFree.exe
        retention-days: 30
